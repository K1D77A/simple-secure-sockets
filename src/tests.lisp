;;;;this file contains a series of tests I have performed to make sure things are working okay

(in-package :simple-secure-sockets)
(defun test (packet)
  (f-format :debug :testing "TEST~%Packet= ~A~%" packet))
(defun test-sending-to-client (port)
  (let ((server nil)
        (client nil))
    (handler-case (progn (setf server (make-server "server" "127.0.0.1" port))
                                        ; (sleep 0.1)
                         (setf client (make-client "client" "127.0.0.1" port))
                                        ;  (sleep 1)
                         (let ((server-con-to-client
                                 (get-current-connections-object server
                                                                 (connection-name client))))
                           (send server-con-to-client (build-data-packet (name server)
                                                                         (connection-name client)
                                                                         "beep boop im groot")))
                         
                         (shutdown server)
                         (sleep 1)
                         (shutdown client)
                         (values client server (packet-queue client)))
      (serious-condition (c)
        (f-format :error :testing "condition: ~A" c)
        (shutdown server)
        (shutdown client)
        (values client server)))))


;;need to catch errors and shut all down etc
(defun test-large-amount-of-connections (n port threads queues)
  ;; (declare (optimize (speed 3)(safety 1)))
  (let ((server nil)
        (clients nil))
    (handler-case
        (progn (setf server (make-server "server" "127.0.0.1" port threads queues))
               
               (setf clients (loop :for x :from 0 :to n
                                   :collect (make-client (format nil "client~d" x)
                                                         "127.0.0.1"
                                                         port)))
               ;;  (print clients)
               (sleep 1)
               ;;   (print (bt:all-threads))
               (mapcar (lambda (client)
                         (mapcar (lambda (available)
                                   ;;   (forced-format t "client: ~A~%" client)
                                   ;;  (forced-format t "available: ~A~%" available)
                                   (unless (equal available :AVAILABLE-CLIENTS)
                                     (format t "sending from ~A to ~A~%"
                                             (connection-name client) available)
                                     (send client (build-data-packet available "oof"))))
                                 (available-clients client)))
                       clients)
               (sleep 0.5)
               ;;   (print (bt:all-threads))
               ;;    (shutdown server t)
               ;;(mapcar #'shutdown clients)
               (values server clients)))))
;;(values clients server))
;; (serious-condition (c)
;;   (f-format :error :testing "condition: ~A" c)
;;   ;; (write-error c)
;;   (mapcar #'shutdown clients)
;;   (shutdown server)
;;   server))))
(defun test-large-amount-of-packets (n port threads queues)
  ;; (declare (optimize (speed 3)(safety 1)))
  (let ((server nil)
        (clients nil))
    (handler-case
        (progn (setf server (make-server "server" "127.0.0.1" port threads queues))
               (setf clients (loop :for x :from 0 :to 1
                                   :collect (make-client (format nil "client~d" x)
                                                         "127.0.0.1"
                                                         port)))
               ;;    (print clients)
               (sleep 0.1)
               (print (bt:all-threads))
               (loop :for x :from 0 :to n
                     :do (send-data-packet (first clients) "client1" "aaah"))
               (sleep 2)

               
               (print (bt:all-threads))
               (shutdown server)
               (mapcar #'shutdown clients)
               ;;               (values server (nth 1 clients)))
               (values clients server)))))
;; (serious-condition (c)
;;   (f-format :error :testing "condition: ~A" c)
;;   (write-error c)
;;   (mapcar #'shutdown clients)
;;   (shutdown server)
;;   server))))
(defun test-server (port thread q)
  (make-server "server" "127.0.0.1" port thread q))
(defun test-client (n port)
  (make-client (format nil "client~d" n) "127.0.0.1" port))
(defun send-to-clients-available (client message)
  (mapcar (lambda (cli)
            (unless (equal cli :AVAILABLE-CLIENTS)
              (send client (build-data-packet cli message))))
          (available-clients client)))
